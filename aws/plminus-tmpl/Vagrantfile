# -*- mode: ruby -*-
# vi: set ft=ruby :

Dotenv.load

# config params {{{

HOSTNAME          = File.basename(Dir.pwd).gsub(/_/, "-")
RESOURCE_GROUP    = "plminus"
CREATED_BY        = `whoami`

IAM_PROFILE       = "plminusteam"
INSTANCE_IMAGE    = "ami-9a2fb89a"    # Amazon Linux AMI 2015.09 (HVM), SSD Volume Type
INSTANCE_TYPE     = "t2.micro"
SUBNET_ID         = "subnet-ce250588" # 172.31.16.0/20
PRIVATE_IP        = nil
DISK_DEVICE       = "/dev/xvda"
DISK_SIZE         = 20
DISK_TYPE         = "gp2"
SECURITY_GROUPS   = [
                      "sg-b52c7ad0",  # default-localnet
                      "sg-2d2c7a48",  # default-ssh
                      "sg-3f2c7a5a",  # default-http
                      "sg-072c7a62",  # default-https
                      "sg-43500626",  # default-tcp-restricted
                     #"sg-182c7a7d",  # default-fullopen
                    ]
SRC_DEST_CHECK    = true
ASSIGN_PUBLIC_IP  = true
ASSIGN_ELASTIC_IP = false
ASSOCIATE_ELB     = false

# }}}

# change default provider
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'aws'

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.define "#{HOSTNAME}" do |node|
    # aws {{{

    node.vm.provider :aws do |provider, override|
      platform        = 'aws'
      username        = ENV['AWS_SSH_USERNAME']
      ssh_private_key = ENV['AWS_SSH_KEY']
      sshkey_to_put   = 'id_rsa'
      scmkey_to_put   = 'id_rsa_scm'

      override.vm.hostname            = "#{HOSTNAME}"
      override.vm.box                 = 'aws'
      override.vm.box_url             = 'https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box'
      override.ssh.username           = username
      override.ssh.private_key_path   = ssh_private_key
      override.ssh.pty                = false

      provider.access_key_id          = ENV['AWS_ACCESS_KEY_ID']
      provider.secret_access_key      = ENV['AWS_SECRET_ACCESS_KEY']
      provider.region                 = ENV['AWS_REGION']
      provider.keypair_name           = ENV['AWS_KEYPAIR_NAME']
      provider.ami                    = INSTANCE_IMAGE

      #provider.region_config "#{ENV['AWS_REGION']}" do |region|
      #  region.ami          = INSTANCE_IMAGE
      #  region.keypair_name = ENV['AWS_KEYPAIR_NAME']
      #end

      provider.instance_type          = INSTANCE_TYPE
      provider.instance_ready_timeout = 300
      provider.terminate_on_shutdown  = false

      provider.iam_instance_profile_name = IAM_PROFILE       if IAM_PROFILE
      provider.security_groups           = SECURITY_GROUPS   if SECURITY_GROUPS
      provider.subnet_id                 = SUBNET_ID         if SUBNET_ID
      provider.private_ip_address        = PRIVATE_IP        if PRIVATE_IP
      provider.associate_public_ip       = ASSIGN_PUBLIC_IP  if ASSIGN_PUBLIC_IP
      provider.elastic_ip                = ASSIGN_ELASTIC_IP if ASSIGN_ELASTIC_IP
      provider.elb                       = ASSOCIATE_ELB     if ASSOCIATE_ELB

      provider.tags = {
        'Name'          => "#{HOSTNAME}",
        'ResourceGroup' => "#{RESOURCE_GROUP}",
        'CreatedBy'     => "#{CREATED_BY}",
      }

      provider.block_device_mapping  = [{
        'DeviceName'              => DISK_DEVICE,
       #'DeviceName'              => '/dev/sda1', # only if you choose paravirtual
       #'DeviceName'              => '/dev/xvda', # only if you choose hvm
       #'VirtualName'             => 'ephemeral0',
        'Ebs.VolumeSize'          => DISK_SIZE,
        'Ebs.DeleteOnTermination' => true,
        'Ebs.VolumeType'          => DISK_TYPE,
       #'Ebs.VolumeType'          => 'standard',  # only if you choose Magnetic Volumes
       #'Ebs.VolumeType'          => 'gp2',       # only if you choose General Purpose  (SSD)
       #'Ebs.VolumeType'          => 'io1',       # only if you choose Provisioned IOPS (SSD)
       #'Ebs.Iops'                => 1000,        # only if you choose io1
      }]

      provider.user_data = <<-USER_DATA
#!/bin/sh
echo "Defaults    !requiretty" > /etc/sudoers.d/devops-init
chmod 440 /etc/sudoers.d/devops-init
hostname #{HOSTNAME}
sed -i "s/\\(HOSTNAME=\\).*/\\1`hostname`/" /etc/sysconfig/network
test ! "$(grep `hostname` /etc/hosts)" && echo "127.0.0.1   `hostname`" >> /etc/hosts
yum -y upgrade
      USER_DATA

      # synced_folder config
      #override.vm.synced_folder "./", "/vagrant", disabled: true
      override.vm.synced_folder "./", "/vagrant", type: "rsync", rsync__args: ["--verbose", "--archive", "--delete", "-z"]


      # enable sudo w/out tty
      # NOTE: setting [ ssh.pty = true ] causes file provisioner fail

      # provision
      override.vm.provision :file,  source: "./dotfiles/.ssh/config",           destination: "/home/#{username}/.ssh/config"
      override.vm.provision :file,  source: "./dotfiles/.ssh/#{sshkey_to_put}", destination: "/home/#{username}/.ssh/id_rsa"
      override.vm.provision :file,  source: "./dotfiles/.ssh/#{scmkey_to_put}", destination: "/home/#{username}/.ssh/id_rsa_scm"
      override.vm.provision :file,  source: "./dotfiles/.gitconfig",            destination: "/home/#{username}/.gitconfig"

      override.vm.provision :shell, inline: "chmod 700 /home/#{username}/.ssh"
      override.vm.provision :shell, inline: "chmod 600 /home/#{username}/.ssh/config"
      override.vm.provision :shell, inline: "chmod 600 /home/#{username}/.ssh/id_rsa"
      override.vm.provision :shell, inline: "chmod 600 /home/#{username}/.ssh/id_rsa_scm"
      override.vm.provision :shell, inline: "chmod 644 /home/#{username}/.gitconfig"
    end

    # }}}
  end
end
