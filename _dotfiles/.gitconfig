[user]
  name  = ec2-user
  email = ec2-user@localhost

[core]
  editor = vim
  pager  = less -i -x4 -eRX
 #pager  = lv -c
 #excludesfile      = ~/.gitignore
  autocrlf          = input # CRLFを自動変換
  precomposeunicode = true
  quotepath         = false

[branch]
  diff = auto
  autosetuprebase = always

[push]
  default = tracking

[status]
  diff = auto

[help]
  autocorrect = 1

[http]
  sslVerify = false

[color]
  branch      = auto
  diff        = auto
  grep        = auto
  interactive = auto
  status      = auto
  ui          = auto

[color "diff"]
  meta = cyan bold
  old  = yellow

[color "diff.add"]
  old = magenta

[alias]
  s   = status -s
  st  = status
  sh  = show
  so  = remote show origin
  v   = remote -v
  ft  = fetch
  up  = pull --rebase      # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  ad  = add
  ci  = commit
  ca  = commit -a          # modifiedなファイルを全てstageへ
  cam = commit -a --amend  # 直前のcommitを修正
  co  = checkout
  cb  = checkout -b        # branch切ってcheckoutする
  cm  = checkout master
  cp  = cherry-pick

  # branch関連
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  pl = pull
  ps = push origin master

  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges

  # logをtree表示
  lal       = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-all   = log --no-merges --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  tr        = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'

  # diff関連
  df  = diff
  di  = diff
  dm  = diff master          # masterとのdiff
  dw  = diff --color-words   # 単語単位でいろつけてdiff
  dc  = diff --cached        # addされているものとのdiff
  ds  = diff --staged        # 同上(1.6.1移行)
  d1  = diff HEAD~           # HEADから1つ前とdiff
  d2  = diff HEAD~~          # HEADから2つ前とdiff
  d3  = diff HEAD~~~         # HEADから3つ前とdiff
  d4  = diff HEAD~~~~        # HEADから4つ前とdiff
  d5  = diff HEAD~~~~~       # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff

  # grep関連
  gr   = grep
  gn   = grep -n
  hist = log --pretty=format:\\\"%h %ad | %s%d [%an]\\\" --graph --date=short

  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"

  # mergeの際にconflictが起きたファイルをadd
  add-unmerged  = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

  # todo: add comments
  delete-merged-branches = !git branch --merged | grep -v 'develop' | grep -v 'master' | grep -v \\* | xargs -I % git branch -d %

  # todo: add comments
  publish-master = !git checkout develop && git pull --rebase && git checkout -b release/$1 develop && git checkout master && git merge --no-ff release/$1

  # todo: add comments
  testing = !echo $1 && echo arg2='$2' && echo args=$@ && echo bar

  # todo: add comments
  cancel  = !git commit -a -m 'temporary commit for cancel' && git reset --hard HEAD~

  # todo: add comments
  fetch-pulls = fetch ghe +refs/pull/*:refs/remotes/pull/*

